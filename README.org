
* WP Frontend – a web front end to the Waterkotte 8126

This is a web frontend written against some scripts that some time ago
were presented in the German ‘Linux Magazin’.[fn:2]

The back end part is OK and we could adapt it to our needs. Anyhow, the
front end was written in such a bad way and so chaotic, that I decided
to write my own one as a WSGI application on top of Pyramid[fn:1].

This is the first web application I wrote, so you can find some ugly
design decisions I haven't come yet to resolve. Another thing is that
I had to deal with some design decisions made by the author of the
back end that I myself would have made surely different. Anyway, we
have almost 99% test coverage, the look is OK and all the plots work.

* Installation 

/wp_frontend/ is a web application and thus has a number of
dependencies that you must fulfill. Hera are the three big packages
that /wp_frontend/ relies on:
+ Pyramid as the web framework used;
+ SQLAlchemy with a MySQL back end to grab the data from the database;
+ Matplotlib (to plot the graphs).

Installation of Pyramid is painless, as it is pure Python. SQLAlchemy
and Matplotlib have further dependencies depending on the way you
choose to install these packages. My recommendation is to use virtual
environments where possible to provide an easy way to install Python
packages that you don't want to install system wide (Pyramid is
probably on that list). 

So, I will treat two (extreme) installation scenarios here:
1) System wide installation of the problematic parts of the
   dependencies (Matplotlib and mysql-python) and installing the rest
   of the dependencies into a virtual environment. /This scenario
   should be used for production environments./
2) System wide installation of the development packages to install all
   (Python) dependencies in a virtual environment. /This scenario
   should be used when developing./ Especially when you want to test
   the work-ability with different Python version you probably /have
   to/ go this way.

+ NOTE :: This guide is tested with /Debian Squeeze/ and /Wheezy/.

Here are the steps that both scenarios do have in common:

#+BEGIN_EXAMPLE
$ sudo aptitude -R install git virtualenvwrapper mysql-server \
 python-tk 
$ source /etc/bash_completion.d/virtualenvwrapper
#+END_EXAMPLE

As the user fetch the sources from github:
#+BEGIN_EXAMPLE 
$ mkdir ~/src
$ cd ~/src
$ git clone git@github.com:fuzzy-id/wp_frontend.git
#+END_EXAMPLE

** Production Environment

And here are the special steps to install /wp_frontend/ in a
production environment:

As root install further dependencies:
#+BEGIN_EXAMPLE
$ sudo aptitude -R install python-mysqldb python-matplotlib
#+END_EXAMPLE

Create a virtual environment for the front-end:
#+BEGIN_EXAMPLE
$ mkvirtualenv --system-site-packages wp
#+END_EXAMPLE

Start with this virtual environment and install further dependencies
of /wp_frontend/:
#+BEGIN_EXAMPLE
$ cd ~/src/wp_frontend
$ workon wp
$ python setup.py develop
#+END_EXAMPLE

The last command will install all further dependencies in your virtual
environment.

** Development Environment

#+BEGIN_EXAMPLE
$ sudo aptitude -R install libpng12-dev libmysqlclient-dev \
 mysql-client tk-dex
#+END_EXAMPLE

#+BEGIN_EXAMPLE
$ workon wp
$ pip install numpy
$ cd ~/src/wp_frontend
$ python setup.py develop
#+END_EXAMPLE

** Optional run the tests

#+BEGIN_EXAMPLE
$ mysql -u root -p < testing.sql 
Enter password:
$ python setup.py test
#+END_EXAMPLE

* Footnotes

[fn:2] The scripts can be found under:
  + ftp://linux-magazin.de/pub/magazin/2010/06/Pumpensteuerung/

[fn:1] http://www.pylonsproject.org/



